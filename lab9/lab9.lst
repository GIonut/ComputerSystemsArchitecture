     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf, fopen, fprintf, fclose              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 6E756D2E74787400            outputfile db 'num.txt',0
    19 00000008 7700                        modwrite db 'w',0
    20 0000000A FFFFFFFF                    handle dd -1
    21 0000000E 00000000                    comp dd 0
    22 00000012 7E00                        keyword db '~', 0
    23 00000014 7369723D00                  message db "sir=",0
    24 00000019 257300                      format db "%s",0
    25 0000001C 73756D3D256400              sumformat db "sum=%d",0
    26 00000023 256400                      intformat db "%d",0
    27 00000026 25732000                    fileformat db '%s ' , 0
    28 0000002A 00<rept>                    n times 11 db 0
    29 00000035 00000000                    sum dd 0
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[08000000]                    push dword modwrite
    35 00000005 68[00000000]                    push dword outputfile
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A3[0A000000]                    mov [handle], eax
    40 00000018 83F800                          cmp eax, 0
    41 0000001B 0F84B8000000                    je theend
    42                                          
    43                                          beg:
    44 00000021 68[14000000]                        push dword message
    45 00000026 FF15[00000000]                      call [printf]       
    46 0000002C 83C404                              add esp, 4*1
    47                                              
    48 0000002F 68[2A000000]                        push dword n
    49 00000034 68[19000000]                        push dword format   ; read a message from keyboard
    50 00000039 FF15[00000000]                      call [scanf]
    51 0000003F 83C408                              add esp, 4*2
    52                                             
    53 00000042 668B1D[2A000000]                    mov bx, [n]
    54 00000049 6683FB7E                            cmp bx, word '~'  ;if the message is ~ then we are done
    55 0000004D 7462                                je end
    56                                              noteq: ; else:
    57 0000004F FC                                      cld
    58 00000050 BE[2A000000]                            mov esi, n
    59 00000055 B90A000000                              mov ecx, 10 ; parse the string of 10 characters and 0
    60 0000005A BA00000000                              mov edx, 0
    61                                                  repeat1:
    62 0000005F AC                                          lodsb
    63 00000060 3C00                                        cmp al, 0
    64 00000062 7421                                        je suma
    65 00000064 3C30                                        cmp al, '0'
    66 00000066 7C26                                        jl file     
    67 00000068 3C39                                        cmp al, '9'
    68 0000006A 7F22                                        jg file     ; if it contains non-numerical values we print it in the created file num.txt
    69 0000006C 88C3                                        mov bl, al
    70 0000006E 80EB30                                      sub bl, '0'
    71 00000071 89D0                                        mov eax, edx
    72 00000073 66BA0A00                                    mov dx, 10
    73 00000077 66F7E2                                      mul dx 
    74 0000007A 89C2                                        mov edx, eax
    75 0000007C 88D8                                        mov al, bl
    76 0000007E 6698                                        cbw
    77 00000080 98                                          cwde
    78 00000081 01C2                                        add edx, eax  ;else convert the string in an integer 
    79 00000083 E2DA                                    loop repeat1
    80                                              suma:
    81 00000085 660115[35000000]                    add [sum], dx ; and add it to a sum
    82 0000008C EB93                            jmp beg    
    83                                              file:
    84 0000008E 68[2A000000]                            push dword n
    85 00000093 68[26000000]                            push dword fileformat
    86 00000098 FF35[0A000000]                          push dword [handle]
    87 0000009E FF15[00000000]                          call [fprintf]
    88 000000A4 83C40C                                  add esp, 4*3
    89                                                  
    90 000000A7 83F800                                  cmp eax, 0
    91 000000AA 7419                                    je error
    92 000000AC E970FFFFFF                      jmp beg
    93                                         end:
    94 000000B1 FF35[35000000]                 push dword [sum]
    95 000000B7 68[1C000000]                   push dword sumformat
    96 000000BC FF15[00000000]                 call [printf]
    97 000000C2 83C408                         add esp, 4*2
    98                                         error:
    99 000000C5 FF35[0A000000]                      push dword [handle]
   100 000000CB FF15[00000000]                      call [fclose]
   101 000000D1 83C404                              add esp, 4*1
   102                                              
   103 000000D4 83F800                              cmp eax, 0
   104 000000D7 7400                                je theend
   105                                          theend:
   106                                          ; exit(0)
   107 000000D9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   108 000000DB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
