     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;x+a/b+c*d-b/c+e = ; a,b,d-byte; c-word; e-doubleword; x-qword ; all unsigned
    15 00000000 EF                          a db 0efh
    16 00000001 12                          b db 12h
    17 00000002 4200                        c dw 42h
    18 00000004 9A                          d db 9ah
    19 00000005 C5920900                    e dd 992c5h
    20 00000009 ABAAAA3A00000000            x dq 3aaaaaabh
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 A0[00000000]                   mov al, [a]; al := a
    26 00000005 B400                           mov ah, 0; unsigned conversion from al to ax := a
    27 00000007 F635[01000000]                 div byte [b]; al := ax / b = a / b  ah := ax % b 
    28 0000000D 88C3                           mov bl, al; bl := al = a / b
    29                                         
    30                                      ;************************************************ bl := a / b ***********************************************************   
    31                                         
    32 0000000F A0[01000000]                   mov al, [b]; al := b
    33 00000014 B400                           mov ah, 0; unsigned conversion from al to ax := b
    34 00000016 66BA0000                       mov dx, 0;unsigned conversion from ax to dx:ax := a
    35 0000001A 66F735[02000000]               div word [c]; ax := dx:ax / c = b / c  dx := dx:ax % c
    36                                         
    37                                      ;************************************************  ax := b / c *********************************************************    
    38                                         
    39 00000021 B700                           mov bh, 0; unsigned conversion from bl to bx := a/b
    40 00000023 66B90000                       mov cx, 0; unsigned conversion from bx to cx:bx := a/b
    41 00000027 66BA0000                       mov dx, 0; unsigned conversion from ax to dx:ax := b/c
    42 0000002B 6629C3                         sub bx, ax; bx := bx - ax      } => cx:bx := cx:bx - dx:ax = a/b - b/c
    43 0000002E 6619D1                         sbb cx, dx; cx := cx - dx - cf }
    44                                         
    45                                      ;************************************************ cx:bx := a/b - b/c ***************************************************    
    46                                         
    47 00000031 A0[04000000]                   mov al, [d]; al := d
    48 00000036 B400                           mov ah, 0; unsigned conversion from al to ax := d
    49 00000038 66F725[02000000]               mul word [c]; dx:ax := c*d
    50                                         
    51                                      ;************************************************ dx:ax := c*d *********************************************************    
    52                                        
    53 0000003F 6601C3                         add bx, ax; bx := bx + ax      } => cx:bx := cx:bx + dx:ax = a/b + c*d - b/c 
    54 00000042 6611D1                         adc cx, dx; cx := cx + dx + cf }
    55                                         
    56                                      ;************************************************ cx:bx := a/b + c*d - b/c *********************************************    
    57                                        
    58 00000045 66031D[05000000]               add bx, [e]; add to bx the word starting at the adress e
    59 0000004C 66130D[07000000]               adc cx, [e+2]; add with carry flag the word starting at the adress e + 2 
    60 00000053 6651                           push cx
    61 00000055 6653                           push bx
    62 00000057 5B                             pop ebx
    63 00000058 B900000000                     mov ecx, 0; unsigned conversion from ebx to ecx:ebx
    64                                         
    65                                      ;************************************************ ebx := a/b + c*d - b/c + e *******************************************    
    66                                      
    67 0000005D A1[09000000]                    mov eax, [x]; moves in eax the dword starting at the adress pointed by [x]
    68 00000062 8B15[0D000000]                  mov edx, [x+4]; moves in edx the dword starting at the adress pointed by [x+4]
    69 00000068 01D8                            add eax, ebx; eax := eax + ebx      } => edx:eax := edx:eax + ecx:ebx 
    70 0000006A 11CA                            adc edx, ecx; edx := edx + ecx + cf }
    71                                          
    72                                      ;****************************************** edx:eax := x + a/b + c*d - b/c + e *****************************************    
    73                                      
    74                                          ; exit(0)
    75 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
