     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  ;a - byte, b - word, c - double word, d - qword - Unsigned representation
     6                                  ;c-(a+d)+(b+d) =  0000000000000134h
     7                                  ; declare external functions needed by our program
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 23                          a db 23h
    16 00000001 2301                        b dw 123h
    17 00000003 34000000                    c dd 34h
    18 00000007 7328090000000000            d dq 92873h
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 668B1D[01000000]                mov bx, [b]; bx := b
    24 00000007 66B90000                        mov cx, 0; unsigned conversion from bx to cx:bx
    25 0000000B 6651                            push cx
    26 0000000D 6653                            push bx
    27 0000000F 5B                              pop ebx; unsigned conversion from cx:bx to ebx := b
    28 00000010 B900000000                      mov ecx, 0; unsigned conversion from ebx to ecx:ebx := b
    29                                          
    30 00000015 A1[07000000]                    mov eax, dword [d]
    31 0000001A 8B15[0B000000]                  mov edx, dword [d+4]; edx:eax := d
    32                                          
    33 00000020 01C3                            add ebx, eax;
    34 00000022 11D1                            adc ecx, edx; ecx:ebx := b+d 
    35                                          
    36                                          
    37 00000024 A1[03000000]                    mov eax, [c];
    38 00000029 BA00000000                      mov edx, 0; unsigned conversion from eax to edx:eax
    39                                          
    40 0000002E 01D8                            add eax, ebx; 
    41 00000030 11CA                            adc edx, ecx; edx:eax := c + (b+d)
    42                                          
    43 00000032 8A1D[00000000]                  mov bl, [a];
    44 00000038 B700                            mov bh, 0; unsigned conversion from bl to bx
    45 0000003A 66B90000                        mov cx, 0; unsigned conversion from bx to cx:bx
    46                                          
    47 0000003E 6651                            push cx
    48 00000040 6653                            push bx
    49 00000042 5B                              pop ebx; unsigned conversion from cx:bx to ebx
    50                                          
    51 00000043 B900000000                      mov ecx, 0; unsigned conversion from ebx to ecx:ebx
    52                                          
    53 00000048 031D[07000000]                  add ebx, dword [d]
    54 0000004E 130D[0B000000]                  adc ecx, dword [d+4]; ecx:ebx := a + d
    55                                          
    56 00000054 29D8                            sub eax, ebx;
    57 00000056 19CA                            sbb edx, ecx; edx:eax := c - (a+d) + (b+d)
    58                                          
    59                                          
    60                                          ; exit(0)
    61 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
