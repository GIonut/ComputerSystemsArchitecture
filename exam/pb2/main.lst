     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  extern function
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0C0000000D0000004C-         sir dd 12, 13, 76, 56, 32, 44
    14 00000009 000000380000002000-
    14 00000012 00002C000000       
    15                                      len equ $-sir
    16 00000018 <res 00000018>              sums resb len
    17 00000030 25642000                    format db '%d ',0
    18 00000034 0A0D00                      newline db 10,13,0
    19 00000037 00000000                    saveEax dd 0
    20 0000003B 06000000                    lenvar dd len/4
    21                                  ; our code starts here
    22                                  segment code use32 class=code public
    23                                      start:
    24                                          ; ...
    25 00000000 6A18                            push dword len
    26 00000002 68[00000000]                    push dword sir
    27 00000007 68[18000000]                    push dword sums
    28                                          ;push dword here
    29                                          ;jmp function
    30 0000000C E8(00000000)                    call function
    31                                          ;here:
    32 00000011 B800000000                      mov eax, 0
    33                                          repeat:
    34 00000016 833D[3B000000]00                    cmp dword[lenvar], 0
    35 0000001D 746A                                je endloop
    36 0000001F 8B98[18000000]                      mov ebx, [sums + eax]
    37 00000025 8B88[1C000000]                      mov ecx, [sums + eax + 4]
    38 0000002B 39CB                                cmp ebx, ecx
    39 0000002D 7230                                jb ascending
    40 0000002F A3[37000000]                            mov [saveEax], eax
    41 00000034 FFB0[00000000]                          push dword[eax + sir]
    42 0000003A 68[30000000]                            push dword format
    43 0000003F FF15[00000000]                          call [printf]
    44                                                  
    45 00000045 83C408                                  add esp, 4*2
    46                                                  
    47 00000048 68[34000000]                            push dword newline
    48 0000004D FF15[00000000]                          call [printf]
    49                                                  
    50 00000053 83C404                                  add esp, 4
    51 00000056 8305[37000000]04                        add dword [saveEax], 4
    52 0000005D EBB7                                    jmp repeat
    53                                              ascending:
    54 0000005F A3[37000000]                            mov [saveEax], eax
    55 00000064 FFB0[00000000]                          push dword[eax+sir]
    56 0000006A 68[30000000]                            push dword format
    57 0000006F FF15[00000000]                          call [printf]
    58                                                  
    59 00000075 83C408                                  add esp, 4*2
    60                                                  
    61 00000078 A1[37000000]                            mov eax, [saveEax]
    62 0000007D 83C004                                  add eax, 4
    63 00000080 832D[3B000000]01                sub dword[lenvar], 1
    64 00000087 EB8D                            jmp repeat
    65                                          endloop:
    66                                          ; exit(0)
    67 00000089 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 0000008B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
