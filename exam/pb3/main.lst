     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  extern sumOfDigits
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 00000000                   N dd 0
    15 00000004 256400                     format db '%d', 0
    16 00000007 00000000                   nr dd 0
    17 0000000B <res 00000028>             sir resd 10
    18 00000033 <res 0000000A>             sums resb 10
    19 0000003D 00000000                   saveEcx dd 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 68[00000000]                    push dword N
    25 00000005 68[04000000]                    push dword format
    26 0000000A FF15[00000000]                  call [scanf]
    27 00000010 83C408                          add esp, 4*2
    28                                          
    29 00000013 8B0D[00000000]                  mov ecx, [N]
    30 00000019 890D[3D000000]                  mov [saveEcx], ecx
    31 0000001F BF[0B000000]                    mov edi, sir
    32 00000024 BE[33000000]                    mov esi, sums
    33                                          repeat:
    34 00000029 833D[3D000000]00                    cmp dword[saveEcx], 0
    35 00000030 742C                                je outOfLoop
    36 00000032 57                                  push dword edi
    37 00000033 68[04000000]                        push dword format
    38 00000038 FF15[00000000]                      call [scanf]
    39                                              
    40 0000003E 83C408                              add esp, 4*2
    41                                              
    42 00000041 FF37                                push dword [edi]
    43 00000043 68[4D000000]                        push dword here
    44 00000048 E9(00000000)                        jmp sumOfDigits
    45                                              ;call sumOfDigits
    46                                              here:
    47 0000004D 83C704                              add edi, 4
    48 00000050 881E                                mov [esi], bl
    49 00000052 83C601                              add esi, 1
    50 00000055 832D[3D000000]01                    sub dword[saveEcx], 1
    51 0000005C EBCB                            jmp repeat
    52                                          outOfLoop:
    53                                          ; exit(0)
    54 0000005E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000060 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
