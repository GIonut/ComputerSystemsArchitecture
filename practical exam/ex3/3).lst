     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, strlen, fprintf, fscanf, fopen, fclose, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import strlen msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                  import fscanf msvcrt.dll
    16                                  import printf msvcrt.dll
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 696E7075742E747874-         file_name db 'input.txt', 0
    20 00000009 00                 
    21 0000000A 6F75747075742E7478-         output_file db 'output.txt', 0
    21 00000013 7400               
    22 00000015 7200                        access_mode db 'r', 0
    23 00000017 7700                        mode_write db 'w', 0
    24 00000019 257300                      format db '%s', 0
    25 0000001C 25732000                    format_print db '%s ', 0
    26 00000020 FFFFFFFF                    handle dd -1
    27 00000024 FFFFFFFF                    handle2 dd -1
    28 00000028 00000000                    len dd 0
    29 0000002C 00<rept>                    string times 10 db 0
    30 00000036 00<rept>                    inverse times 10 db 0
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35 00000000 68[15000000]                    push dword access_mode
    36 00000005 68[00000000]                    push dword file_name
    37 0000000A FF15[00000000]                  call [fopen]
    38                                          
    39 00000010 83C408                          add esp, 4*2
    40                                          
    41 00000013 A3[20000000]                    mov [handle], eax
    42 00000018 83F800                          cmp eax, 0
    43 0000001B 0F84F4000000                    je theend
    44                                          
    45 00000021 68[17000000]                    push dword mode_write
    46 00000026 68[0A000000]                    push dword output_file
    47 0000002B FF15[00000000]                  call [fopen]
    48 00000031 83C408                          add esp, 4*2
    49                                          
    50 00000034 A3[24000000]                    mov [handle2], eax
    51 00000039 83F800                          cmp eax, 0
    52 0000003C 0F84D3000000                    je theend
    53                                          
    54                                          repeat:
    55 00000042 68[2C000000]                        push dword string
    56 00000047 68[19000000]                        push dword format
    57 0000004C FF35[20000000]                      push dword [handle]
    58 00000052 FF15[00000000]                      call [fscanf]
    59 00000058 83C40C                              add esp, 4*3
    60                                              
    61 0000005B 83F8FF                              cmp eax, -1
    62 0000005E 0F84B1000000                        je EOF
    63                                              
    64 00000064 68[2C000000]                        push dword string
    65 00000069 FF15[00000000]                      call [strlen]
    66 0000006F A3[28000000]                        mov dword [len], eax
    67 00000074 89C1                                mov ecx, eax
    68                                              
    69 00000076 803D[2C000000]5A                    cmp byte [string], 'Z'
    70 0000007D 7F3A                                jg notfirstword
    71                                              
    72 0000007F 803D[2C000000]0A                    cmp byte [string], 10
    73 00000086 7472                                je notlastword
    74                                              
    75 00000088 C681[36000000]00                    mov byte [inverse+ecx], 0
    76 0000008F C681[2C000000]00                    mov byte [string+ecx], 0
    77 00000096 BF[36000000]                        mov edi, inverse
    78 0000009B BE[2C000000]                        mov esi, string
    79                                  
    80                                                  repeat1:
    81 000000A0 8A440EFF                                    mov al, byte [esi+ecx-1]
    82 000000A4 AA                                          stosb
    83 000000A5 E2F9                                        loop repeat1
    84                                                      
    85 000000A7 BE[36000000]                            mov esi, inverse
    86 000000AC BF[2C000000]                            mov edi, string
    87 000000B1 8B0D[28000000]                          mov ecx, [len]
    88 000000B7 F2A4                                    repnz movsb
    89                                              notfirstword:
    90                                            
    91 000000B9 BE[2C000000]                        mov esi, string
    92 000000BE 807C0EFF2E                          cmp byte [esi+ecx-1], '.'
    93 000000C3 7535                                jne notlastword
    94                                              
    95 000000C5 C681[36000000]00                        mov byte [inverse+ecx], 0
    96 000000CC C681[2C000000]00                        mov byte [string+ecx], 0
    97 000000D3 BF[36000000]                            mov edi, inverse
    98                                                  
    99 000000D8 83E901                                  sub ecx, 1
   100                                                  
   101                                                  repeat2:
   102 000000DB 8A440EFF                                    mov al, byte [esi+ecx-1]
   103 000000DF AA                                          stosb
   104 000000E0 E2F9                                        loop repeat2
   105 000000E2 C6072E                                  mov byte [edi], '.'
   106 000000E5 BE[36000000]                            mov esi, inverse
   107 000000EA BF[2C000000]                            mov edi, string
   108 000000EF 8B0D[28000000]                          mov ecx, [len]
   109 000000F5 83C101                                  add ecx, 1
   110 000000F8 F2A4                                    repnz movsb
   111                                                  
   112                                              notlastword:
   113                                              
   114 000000FA 68[2C000000]                        push dword string
   115 000000FF 68[1C000000]                        push dword format_print
   116 00000104 FF35[24000000]                      push dword [handle2]
   117 0000010A FF15[00000000]                      call [fprintf]
   118                                              
   119 00000110 E92DFFFFFF                          jmp repeat
   120                                              EOF:
   121                                              
   122                                              theend:
   123 00000115 FF35[20000000]                      push dword [handle]
   124 0000011B FF15[00000000]                      call [fclose]
   125                                          ; exit(0)
   126 00000121 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   127 00000123 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   128                                          ; exit(0)
   129 00000129 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   130 0000012B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
